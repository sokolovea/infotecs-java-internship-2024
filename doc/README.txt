Исходники сервиса и драйвера и тестов к ним располагаются в подкаталоге src,
документация на API сервиса и руководство пользователя для драйвера в подкаталоге doc.

-- КРАТКОЕ ОПИСАНИЕ РЕШЕНИЯ --
Сервис написан с использованием фреймворков Spring Boot, Spring Framework, использует
Swagger для генерации документации по API. Обзор классов:
1) StorageMap - самописная база данных ключ-значение на основе карты отображения,
хранящая записи и методы по установке/получению/удалению значений, сериализации,
периодической очистке устаревших записей и т.п.;
2) StorageController – контроллер REST API, позволяющий клиентам взаимодействовать с
объектом класса StorageMap;
3) Остальные классы - вспомогательные (в основном, предназначенных для упрощения конвертации
запросов и ответов в формате JSON в объекты и наоборот)

Исходники драйвера хоть и располагаются в одном проекте с сервисом, но написаны почти на чистой Java
и не зависит от Spring Boot/Spring Framework, требуя для работы из сторонних библиотек лишь Jackson.
Гланый класс библиотеки - StorageDriver.

Для большинства методов классов StorageMap и Controller разработаны UNIT-тесты,
для StorageDriver - интеграционные тесты с использованием spring-boot-starter-test.

--- СБОРКА И ТЕСТИРОВАНИЕ ---
Сборка проекта производится с помощью Maven, требуется установленный JDK 17-ой версии.
При отсутствии установленного mvn в системе можно использовать скрипты mvnw.cmd или mvnw
для Windows и UNIX-систем соответственно из каталога src. В случае использования UNIX-системы
необходимо предварительно сделать скрипт исполняемым: chmod +x ./mvnw
Для сборки необходимо перейти в каталог src и ввести:
1) Для сборки сервиса и драйвера
./mvnw clean package -DskipTests
2) Для запуска тестов
./mvnw test
3) Для сборки сервиса и драйвера + запуска тестов
./mvnw clean package

После сборки в каталоге src/target появятся jar файлы, из которых:
1) service.jar - сам сервис;
2) internship-service-driver.jar - библиотека с драйвером для сервиса.

--- ЗАПУСК СЕРВИСА ---
Для запуска сервиса требуется java версии не ниже 17.
Запуск без параметров: java -jar service.jar
По умолчанию сервер запускается на порту 8082, для его ручного задания нужно ввести
параметр в консоли, например: java -jar service.jar --server.port=8080